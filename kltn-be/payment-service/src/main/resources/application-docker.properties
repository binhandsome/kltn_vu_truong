spring.application.name=payment-service
server.port=8087
spring.cloud.config.enabled=false

# Eureka trong m?ng compose
eureka.client.service-url.defaultZone=http://eureka:8761/eureka
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.instance.prefer-ip-address=true
eureka.instance.instance-id=${spring.application.name}:${server.port}

# MySQL (container "mysql")
spring.datasource.url=jdbc:mysql://mysql:3306/paymentservice?useSSL=false&serverTimezone=Asia/Ho_Chi_Minh&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=123456789
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.show-sql=true
spring.jpa.defer-datasource-initialization=true

# Redis (n?u có dùng)
spring.data.redis.host=redis
spring.data.redis.port=6379

internal.secret=N7KI3OyOM4SoU+19Y2tDbZX0D2ySHA4vNSmv1bwog8k1REDEANaEZgwnUzFvm8XhG51jge9a9+/03Dqoc55VDw==
jwt.secret=aGtHd1hnM3NlcEh5U3lmaDhoUWVrZ0dZN0RZbGZxVXpKbFlGbFZKZ2JPRzFqcmMybWhVZFN5N0RoT0JreEdhVg==
jwt.expiration=10000
jwt.refresh.expiration=604800000

# VNPay / PayPal (GI? nguyên sandbox; n?u ?i qua Kong: cân nh?c ??i returnUrl sang http://localhost:8000/payment/...)
vnpay.tmnCode=4YUP19I4
vnpay.hashSecret=MDUIFDCRAKLNBPOFIAFNEKFRNMFBYEPX
vnpay.url=https://sandbox.vnpayment.vn/paymentv2/vpcpay.html
vnpay.returnUrl=http://localhost:3000/user/shoppages/paymentReturn
vnpay.apiUrl=https://sandbox.vnpayment.vn/merchant_webapi/api/transaction

paypal.client.id=AVB3-TgMmIqlJOzMk1cuMtfBATF_QvjH2IlxYQH8ik4Zz4QuV2FBkdP3t2_AtgwIzd5KNA92AbSBFcq6
paypal.client.secret=ENFEaR1nCq7vOdLZs0wXOm1T1Eb1wqKoDoXZQHQOlSQo7LaWR9mEoBJoVHxQOn4jQeBczdJFPA-iW2H9
paypal.mode=sandbox
paypal.returnUrl=http://payment-service:8087/api/payment/paypal_return
# N?u truy c?p qua Kong: paypal.returnUrl=http://kong:8000/payment/api/payment/paypal_return

# Observability / Retry (gi? nguyên)
resilience4j.retry.instances.sample-api.maxAttempts=5
resilience4j.retry.instances.sample-api.wait-duration=1s
resilience4j.retry.instances.sample-api.enable-exponential-backoff=true
resilience4j.ratelimiter.instances.default.limit-for-period=2
resilience4j.ratelimiter.instances.default.limit-refresh-period=10
resilience4j.bulkhead.instances.default.max-concurrent-calls=10
resilience4j.bulkhead.instances.sample-api.max-concurrent-calls=1
management.tracing.sampling.probability=1.0
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

