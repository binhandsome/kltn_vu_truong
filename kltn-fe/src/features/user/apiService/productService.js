const PRODUCT_API_URL = 'http://localhost:8000/api/products';

// L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m c√≥ filter
export const getAllProducts = async (filterParams) => {
  const response = await fetch(`${PRODUCT_API_URL}/getAllProduct`, {
    method : 'GET',
    headers: { 'Content-Type': 'application/json' },
    // üß† fetch kh√¥ng t·ª± serialize query params => ta ph·∫£i l√†m th·ªß c√¥ng
    signal: AbortSignal.timeout?.(5000), // optional timeout
  });

  const url = new URL(`${PRODUCT_API_URL}/getAllProduct`);
  Object.entries(filterParams || {}).forEach(([key, value]) =>
    url.searchParams.append(key, value)
  );

  const res = await fetch(url);

  if (!res.ok) {
    const errorText = await res.text();
    throw new Error(errorText || `Request failed with status ${res.status}`);
  }

  return await res.json(); // Tr·∫£ v·ªÅ Page<Product>
};

// L·ªçc theo salesRank ho·∫∑c productType
export const filterProducts = async (params) => {
  const url = new URL(`${PRODUCT_API_URL}/filterCategories`);
  Object.entries(params || {}).forEach(([key, value]) =>
    url.searchParams.append(key, value)
  );

  const res = await fetch(url);

  if (!res.ok) {
    const err = await res.json().catch(() => ({}));
    throw new Error(err.error || 'Kh√¥ng th·ªÉ l·ªçc s·∫£n ph·∫©m');
  }

  return await res.json(); // Tr·∫£ v·ªÅ ProductFilterResponse
};

// L·∫•y chi ti·∫øt s·∫£n ph·∫©m theo asin
export const getProductDetail = async (asin) => {
  const res = await fetch(`${PRODUCT_API_URL}/productDetail/${asin}`);

  if (!res.ok) {
    const err = await res.text();
    throw new Error(err || 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m');
  }

  return await res.json(); // Tr·∫£ v·ªÅ Product
};
